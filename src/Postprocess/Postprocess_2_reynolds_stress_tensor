export FieldRMS
@kwdef struct ReynoldsStress{T<:AbstractField,T2<:AbstractField,S<:String}
    field::T 
    name::S
    rs::T2
    mean::T
    mean_sq::T
    rms::T
    start::Real
    stop::Real
    update_interval::Real
end  

function ReynoldsStress(field; name::AbstractString =  "Reynolds Stress", start::Real=1, stop::Real=typemax(Int),update_interval::Real=1)
    start > 0      || throw(ArgumentError("Start must be a positive value (got $start)"))
    stop  >= start  || throw(ArgumentError("Stop ($stop) must be greater than or equal to start ($start)"))
    update_interval > 0 || throw(ArgumentError("save interval must be >0 (got $update_interval)"))
    if field isa VectorField
        rs = TensorField(field.mesh)
        mean = VectorField(field.mesh)
        mean_sq = VectorField(field.mesh)
        rms = VectorField(field.mesh)
    else
        throw(ArgumentError("Unsupported field type: $(typeof(field))"))
    end
    return  ReynoldsStress(field=field,name=name,rs=rs,mean=mean,mean_sq=mean_sq,rms=rms,start=start,stop=stop,update_interval=update_interval)
end

function runtime_postprocessing!(RS::ReynoldsStress{T,T2,S},iter::Integer,n_iterations::Integer) where {T<:VectorField,T2,S}
    if must_calculate(RS,iter,n_iterations)
        current_field = RS.field
        n = div(iter - RS.start,RS.update_interval) + 1
        _update_running_mean!(RS.mean.x.values, current_field.x.values, n)
        _update_running_mean!(RS.mean_sq.x.values, current_field.x.values .^2,n)
        _update_running_mean!(RS.mean.y.values, current_field.y.values, n)
        _update_running_mean!(RS.mean_sq.y.values, current_field.y.values .^2,n)
        _update_running_mean!(RS.mean.z.values, current_field.z.values, n)
        _update_running_mean!(RS.mean_sq.z.values, current_field.z.values .^2,n)

        z = zero(eltype(RS.rms.x.values))
        @. RS.rms.x.values = sqrt(max(RS.mean_sq.x.values - RS.mean.x.values^2, z)) 
        @. RS.rms.y.values = sqrt(max(RS.mean_sq.y.values - RS.mean.y.values^2, z)) 
        @. RS.rms.z.values = sqrt(max(RS.mean_sq.z.values - RS.mean.z.values^2, z)) 
        
    end
    return nothing
end

function convert_time_to_iterations(RMS::FieldRMS, model,dt,iterations)
    if model.time === Transient()
        start = Int(ceil(RMS.start / dt))
        stop = Int(min(RMS.stop,dt*iterations) / dt )
        update_interval = max(1, Int(floor(RMS.update_interval / dt)))
        update_interval >= 1 || throw(ArgumentError("update interval must be â‰¥1 (got $update_interval)"))
        stop >= start || throw(ArgumentError("After conversion with dt=$dt the RMS calculation window is empty (start = $start, stop = $stop)"))
        return FieldRMS(field=RMS.field,name=RMS.name,mean=RMS.mean,mean_sq=RMS.mean_sq,rms = RMS.rms, start=start,stop=stop,update_interval=update_interval)
    else
        isinteger(RMS.start) && isinteger(RMS.stop) && isinteger(RMS.update_interval) || throw(ArgumentError("For steady runs, start/stop/update_interval must be integers."))

        return RMS
    end
end